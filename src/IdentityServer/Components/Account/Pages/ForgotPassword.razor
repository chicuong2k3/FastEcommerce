@page "/Account/ForgotPassword"

@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject IValidator<ForgotPasswordInputModel> Validator
@inject UserManager<ApplicationUser> UserManager
@inject IEmailService EmailService
@inject NavigationManager NavigationManager
@inject INotifService NotifService

<PageTitle>Quên mật khẩu</PageTitle>

<RadzenRow AlignItems="AlignItems.Center" Style="height: 100vh">
    <RadzenColumn Size="10" Offset="1" SizeMD="4" OffsetMD="4">
        <RadzenCard Variant="Variant.Outlined">
            <RadzenText TextStyle="TextStyle.H5" TextAlign="TextAlign.Center">
                QUÊN MẬT KHẨU
            </RadzenText>

            <RadzenAlert AllowClose="false" ShowIcon="false" AlertStyle="AlertStyle.Info" Shade="Shade.Lighter">
                @if (string.IsNullOrEmpty(message))
                {
                    <text>
                        Vui lòng nhập địa chỉ email mà bạn đã dùng để tạo tài khoản.
                        Chúng tôi sẽ gửi một liên kết để đặt lại mật khẩu.
                    </text>
                }
                else
                {
                    @message
                }
            </RadzenAlert>

            <RadzenStack JustifyContent="JustifyContent.Center">
                <RadzenTemplateForm TItem="ForgotPasswordInputModel" Data="@Input" Submit="@OnValidSubmitAsync">
                    <RadzenStack Gap="12px">
                        <RadzenFormField Text="Email" Variant="Variant.Outlined" AllowFloatingLabel="false" Style="width: 100%;">
                            <ChildContent>
                                <RadzenTextBox Name="Email" @bind-Value="Input.Email" />
                            </ChildContent>
                            <Helper>
                                <FluentValidator TModel="ForgotPasswordInputModel" TValue="string"
                                                 For="@(() => Input.Email)"
                                                 Model="@Input"
                                                 Validator="@Validator" />
                            </Helper>
                        </RadzenFormField>

                        <RadzenButton Text="Gửi liên kết đặt lại mật khẩu đến email"
                                      IsBusy="@isSubmitting"
                                      ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" Variant="Variant.Flat" Style="width: 100%" />
                    </RadzenStack>

                </RadzenTemplateForm>

                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <TextButton Text="Đăng nhập" Path="@($"/Account/Login?ReturnUrl={Uri.EscapeDataString(ReturnUrl ?? "/")}")" />
                    <TextButton Text="Đăng ký" Path="@($"/Account/Register?ReturnUrl={Uri.EscapeDataString(ReturnUrl ?? "/")}")" />
                </RadzenStack>

            </RadzenStack>

        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code {
    private ForgotPasswordInputModel Input { get; set; } = new();

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private bool isSubmitting = false;

    private string message = string.Empty;

    private async Task OnValidSubmitAsync()
    {
        message = string.Empty;
        isSubmitting = true;

        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            message = "Chúng tôi đã gửi liên kết đặt lại mật khẩu đến email của bạn. Hãy kiểm tra hộp thư.";
            isSubmitting = false;

            return;
        }

        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code, ["returnUrl"] = ReturnUrl });

        var content = $"<a href='{callbackUrl}'>Đặt lại mật khẩu</a>";
        var success = await EmailService.SendEmailAsync(user.UserName!, Input.Email, "Đặt lại mật khẩu", content);

        isSubmitting = false;

        if (!success)
        {
            NotifService.Error("Có lỗi xảy ra. Vui lòng thử lại sau!");
            return;
        }

        message = "Chúng tôi đã gửi liên kết đặt lại mật khẩu đến email của bạn. Hãy kiểm tra hộp thư.";
    }

    public sealed class ForgotPasswordInputModel
    {
        public string Email { get; set; } = string.Empty;
    }

    public class ForgotPasswordInputModelValidator : AbstractValidator<ForgotPasswordInputModel>
    {
        public ForgotPasswordInputModelValidator()
        {
            RuleFor(x => x.Email)
                .NotEmpty().WithMessage("Email không được để trống.")
                .EmailAddress().WithMessage("Email không hợp lệ.");
        }
    }
}
