@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using IdentityServer.Data

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IValidator<ResetPasswordInputModel> Validator
@inject INotifService NotifService

<PageTitle>Đặt lại mật khẩu</PageTitle>

<RadzenRow AlignItems="AlignItems.Center" Style="height: 100vh;">
    <RadzenColumn Size="10" Offset="1" SizeMD="4" OffsetMD="4">
        <RadzenCard Variant="Variant.Outlined">
            <RadzenText TextStyle="TextStyle.H5" TextAlign="TextAlign.Center">
                ĐẶT LẠI MẬT KHẨU
            </RadzenText>
            <RadzenStack JustifyContent="JustifyContent.Center">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <RadzenAlert AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" AllowClose="false">
                        @errorMessage
                    </RadzenAlert>
                }
                else if (SuccessMessage != null)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter" AllowClose="false">
                        <ChildContent>
                            @SuccessMessage
                        </ChildContent>
                    </RadzenAlert>
                }

                <RadzenTemplateForm TItem="ResetPasswordInputModel" Data="@Input" Submit="OnValidSubmitAsync">
                    <RadzenStack Gap="12px">
                        <RadzenFormField Text="Email" Variant="Variant.Outlined" AllowFloatingLabel="false" Style="width: 100%;">
                            <ChildContent>
                                <RadzenTextBox Name="Email" @bind-Value="Input.Email" />
                            </ChildContent>
                            <Helper>
                                <FluentValidator TModel="ResetPasswordInputModel" TValue="string"
                                                 For="@(() => Input.Email)"
                                                 Model="@Input"
                                                 Validator="@Validator" />
                            </Helper>
                        </RadzenFormField>
                        <RadzenFormField Text="Mật khẩu" Variant="Variant.Outlined" AllowFloatingLabel="false" Style="width: 100%;">
                            <ChildContent>
                                <RadzenPassword Name="Password" @bind-Value="Input.Password" />
                            </ChildContent>
                            <Helper>
                                <FluentValidator TModel="ResetPasswordInputModel" TValue="string"
                                                 For="@(() => Input.Password)"
                                                 Model="@Input"
                                                 Validator="@Validator" />
                            </Helper>
                        </RadzenFormField>
                        <RadzenFormField Text="Xác nhận mật khẩu" Variant="Variant.Outlined" AllowFloatingLabel="false" Style="width: 100%;">
                            <ChildContent>
                                <RadzenPassword Name="ConfirmPassword" @bind-Value="Input.ConfirmPassword" />
                            </ChildContent>
                            <Helper>
                                <FluentValidator TModel="ResetPasswordInputModel" TValue="string"
                                                 For="@(() => Input.ConfirmPassword)"
                                                 Model="@Input"
                                                 Validator="@Validator" />
                            </Helper>
                        </RadzenFormField>


                        <RadzenButton Text="ĐẶT LẠI MẬT KHẨU" IsBusy="isSubmitting"
                                      ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" Variant="Variant.Flat" Style="width: 100%" />
                    </RadzenStack>

                </RadzenTemplateForm>

            </RadzenStack>

            <ExternalLoginPicker />
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    private ResetPasswordInputModel Input { get; set; } = new();

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? errorMessage => identityErrors is null ? null : identityErrors.Select(error => error.Description).FirstOrDefault();
    private RenderFragment? SuccessMessage;
    private bool isSubmitting = false;

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            NotifService.Error("Có lỗi xảy ra!");
            NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/Login").AbsoluteUri,
                new Dictionary<string, object?> { ["returnUrl"] = ReturnUrl }), forceLoad: true);
            return;
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        isSubmitting = true;
        identityErrors = null;
        SuccessMessage = null;
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            SuccessMessage =@<span>
                Mật khẩu của bạn đã được đặt lại.
                <TextButton Text="Nhấn vào đây để đăng nhập." Path="@($"/Account/Login?ReturnUrl={Uri.EscapeDataString(ReturnUrl ?? "/")}")"></TextButton>
            </span>;
            isSubmitting = false;
            return;
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        isSubmitting = false;
        if (result.Succeeded)
        {
            SuccessMessage =@<span>
                Mật khẩu của bạn đã được đặt lại.
                <TextButton Text="Nhấn vào đây để đăng nhập." Path="@($"/Account/Login?ReturnUrl={Uri.EscapeDataString(ReturnUrl ?? "/")}")"></TextButton>
            </span>;
            return;
        }

        identityErrors = result.Errors;
    }

    public sealed class ResetPasswordInputModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
        public string Code { get; set; } = string.Empty;
    }

    public class ResetPasswordInputModelValidator : AbstractValidator<ResetPasswordInputModel>
    {
        public ResetPasswordInputModelValidator()
        {
            RuleFor(x => x.Email)
                .NotEmpty().WithMessage("Email không được để trống.")
                .EmailAddress().WithMessage("Email không hợp lệ.");

            RuleFor(x => x.Password)
                .NotEmpty().WithMessage("Mật khẩu không được để trống.")
                .MinimumLength(6).WithMessage("Mật khẩu phải có ít nhất 6 ký tự.");

            RuleFor(x => x.ConfirmPassword)
                .NotEmpty().WithMessage("Xác nhận mật khẩu không được để trống.")
                .Equal(x => x.Password).WithMessage("Xác nhận mật khẩu không khớp.");

            RuleFor(x => x.Code)
                .NotEmpty().WithMessage("Mã đặt lại mật khẩu không được để trống.");
        }
    }

}
