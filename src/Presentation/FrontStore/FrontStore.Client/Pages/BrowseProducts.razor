@page "/shop"
@using UIShared.Abstractions

@inject IProductService ProductService

<RadzenRow>
    <RadzenColumn Size="3" SizeMD="3" SizeSM="12">
        @* <ProductFilter @bind-MinPrice="@minPrice" @bind-MaxPrice="@maxPrice" FilterApplied="@ApplyFilter" /> *@
    </RadzenColumn>

    <RadzenColumn Size="9" SizeMD="9" SizeSM="12">
        <!-- Sorting Dropdown -->
        <RadzenRow JustifyContent="JustifyContent.End" Style="margin-bottom: 1.5rem;">
            <RadzenDropDown @bind-Value="@sortOption" Data="@sortOptionMap" TextProperty="Value" ValueProperty="Key" Change="@(option => SetSortOption((string)option))" Style="width: 200px;" />
        </RadzenRow>

        <!-- Product Grid -->
        <RadzenRow Gap="0">
            @foreach (var product in products)
            {
                <RadzenColumn SizeLG="2" SizeMD="3" SizeSM="12">
                    <ProductCard Product="@product" Thumbnail="@productThumbnails.FirstOrDefault(t => t.ProductId == product.Id)?.ThumbnailUrl" />
                </RadzenColumn>
            }
        </RadzenRow>

        <!-- Pagination -->
        @if (TotalPages > 1)
        {
            <RadzenRow JustifyContent="JustifyContent.End" Style="margin-top: 1.5rem;">
                <RadzenPager PageSize="@itemsPerPage" PageChanged="@(args => SetPage(args.PageIndex))" ShowPagingSummary="true" PagingSummaryFormat="Trang {0} / {1}" />
            </RadzenRow>
        }
    </RadzenColumn>
</RadzenRow>

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    private List<ProductReadModel> products = new();
    private List<ThumbnailReadModel> productThumbnails = new();
    private Dictionary<string, string> sortOptionMap = new()
    {
        {"name asc", "Tên A-Z"},
        {"name desc", "Tên Z-A"},
        {"price asc", "Giá tăng dần"},
        {"price desc", "Giá giảm dần"},
    };
    private string sortOption = "name asc";
    private int itemsPerPage = 12;
    private int currentPage = 1;
    private int TotalPages;

    private decimal? minPrice = 0;
    private decimal? maxPrice = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
        await base.OnInitializedAsync();
    }

    private async Task LoadProductsAsync()
    {
        var response = await ProductService.GetProductsAsync(new SearchProductsRequest()
        {
            PageNumber = currentPage,
            PageSize = itemsPerPage,
            SortBy = sortOption,
            MinPrice = minPrice,
            MaxPrice = maxPrice
        });

        if (response.IsSuccess)
        {
            products = response.Value.Data.ToList();
            TotalPages = response.Value.TotalPages;
            productThumbnails.Clear();
            foreach (var product in products)
            {
                var imageResponse = await ProductService.GetThumbnailAsync(product.Id);
                if (imageResponse.IsSuccess)
                {
                    productThumbnails.Add(imageResponse.Value);
                }
            }
        }
    }

    private async Task ApplyFilter()
    {
        currentPage = 1;
        await LoadProductsAsync();
        StateHasChanged();
    }

    private async Task SetSortOption(string option)
    {
        sortOption = option;
        currentPage = 1;
        await LoadProductsAsync();
        StateHasChanged();
    }

    private async Task SetPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            currentPage = page;
            await LoadProductsAsync();
            StateHasChanged();
        }
    }
}