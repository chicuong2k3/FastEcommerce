@inject IProductAttributeService ProductAttributeService
@inject NotificationService NotificationService

<RadzenStack Gap="16px">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
        <RadzenText TextStyle="TextStyle.H6">
            Danh sách giá trị của thuộc tính @(ProductAttribute.Name)
        </RadzenText>
        <RadzenButton Text="Xóa các giá trị đã chọn" ButtonStyle="ButtonStyle.Danger" Size="Radzen.ButtonSize.Medium" Disabled="@(!selectedValues.Any())" Click="RemoveSelectedValues" Shade="Radzen.Shade.Default" Variant="Radzen.Variant.Flat" />
    </RadzenStack>
    @if (attributeValues.Any())
    {
        <RadzenDataGrid Data="@PaginatedAttributeValues" TItem="AttributeValueReadModel" AllowSorting="true" AllowFiltering="false" AllowPaging="true" AllowVirtualization="true" AllowAlternatingRows="true" Density="Radzen.Density.Compact" GridLines="Radzen.DataGridGridLines.Default" Responsive="false" AllowCompositeDataCells="false" ShowCellDataAsTooltip="true" EmptyText="Không có giá trị." AllowRowSelectOnRowClick="false" IsLoading="false" EditMode="Radzen.DataGridEditMode.Single" PagerAlwaysVisible="false" PagerHorizontalAlign="Radzen.HorizontalAlign.Right" PageSize="5" PageSizeOptions="[5, 10, 50]" PagerPosition="Radzen.PagerPosition.Bottom" GotoFirstPageOnSort="true" PageSizeText="dòng mỗi trang" PageTitleFormat="Trang {0}" PagingSummaryFormat="Trang {0} của {1} (tổng {2} dòng))">
            <Columns>
                <RadzenDataGridColumn TItem="AttributeValueReadModel" Title="Chọn" Width="80px" Sortable="false" Filterable="false">
                    <Template Context="value">
                        <RadzenCheckBox TValue="bool" Value="@(selectedValues.Contains(value.AttributeValue))"
                                        Change="@(isChecked => ToggleValueSelection(value.AttributeValue, isChecked))" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="AttributeValueReadModel" Property="AttributeValue" Title="Giá trị" />
            </Columns>
            <HeaderTemplate>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8px">
                    <RadzenCheckBox TValue="bool" Value="selectAll" Change="ToggleSelectAll" />
                    <RadzenText Text="Chọn tất cả" />
                </RadzenStack>
            </HeaderTemplate>
        </RadzenDataGrid>
        @if (TotalPages > 0)
        {
            <RadzenPager PageSize="@pageSize" HorizontalAlign="HorizontalAlign.Right" Style="margin-top: 16px;" />
        }
    }
    else
    {
        <RadzenText TextStyle="TextStyle.H6" Text="Chưa có giá trị nào" Style="margin-top: 12px;" />
    }
</RadzenStack>

@code {
    [Parameter]
    public ProductAttributeReadModel ProductAttribute { get; set; } = new();
    private List<AttributeValueReadModel> attributeValues = new();
    private HashSet<string> selectedValues = new();
    private bool selectAll = false;

    private int pageSize = 5;
    private int currentPage = 1;
    private int TotalPages => (int)Math.Ceiling((double)attributeValues.Count / pageSize);
    private IEnumerable<AttributeValueReadModel> PaginatedAttributeValues =>
        attributeValues.Skip((currentPage - 1) * pageSize).Take(pageSize);

    protected override async Task OnParametersSetAsync()
    {
        await LoadAttributeValuesAsync();
        selectedValues.Clear();
        selectAll = false;
        currentPage = 1;
        await base.OnParametersSetAsync();
    }

    private async Task LoadAttributeValuesAsync()
    {
        var response = await ProductAttributeService.GetAttributeValuesAsync(ProductAttribute.Id);

        if (response.ResponseMessage.IsSuccessStatusCode)
        {
            currentPage = 1;
            attributeValues = response.GetContent().ToList();
        }
        await InvokeAsync(StateHasChanged);
    }

    private void ToggleValueSelection(string value, bool isChecked)
    {
        if (isChecked)
        {
            selectedValues.Add(value);
        }
        else
        {
            selectedValues.Remove(value);
        }
        selectAll = PaginatedAttributeValues.All(v => selectedValues.Contains(v.AttributeValue));
        StateHasChanged();
    }

    private void ToggleSelectAll(bool isChecked)
    {
        selectAll = isChecked;
        if (isChecked)
        {
            foreach (var value in PaginatedAttributeValues)
            {
                selectedValues.Add(value.AttributeValue);
            }
        }
        else
        {
            foreach (var value in PaginatedAttributeValues)
            {
                selectedValues.Remove(value.AttributeValue);
            }
        }
        StateHasChanged();
    }

    private async Task RemoveSelectedValues()
    {
        var request = new RemoveValuesFromAttributeRequest { Values = selectedValues.ToList() };
        var response = await ProductAttributeService.RemoveValuesFromAttributeAsync(ProductAttribute.Id, request);
        if (response.ResponseMessage.IsSuccessStatusCode)
        {
            attributeValues.RemoveAll(v => selectedValues.Contains(v.AttributeValue));
            if (PaginatedAttributeValues.Count() == 0 && currentPage > 1)
            {
                await SetPage(currentPage - 1);
            }
            selectedValues.Clear();
            selectAll = false;
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Xóa thành công",
                Duration = 3000
            });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Xóa thất bại",
                Duration = 3000
            });
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            currentPage = page;
            selectedValues.Clear();
            selectAll = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}